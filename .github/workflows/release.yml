name: MeloviTUI Release

# Trigger on push of version tags
on:
  push:
    tags:
      - 'v*'

env:
  CARGO_TERM_COLOR: always
  BINARY_NAME: melovitui
  REPO_DESCRIPTION: "A TUI-based music player and visualizer built with Rust and Ratatui - Listen to music with beautiful real-time visualizations"

jobs:
  # Job to create GitHub Release
  create-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          name: MeloviTUI ${{ github.ref_name }}
          draft: false
          prerelease: false
          generate_release_notes: true
          body: |
            # MeloviTUI ${{ github.ref_name }}
            
            A terminal-based music player and visualizer built with Rust and Ratatui.
            
            ## Features
            
            - 🎵 Music Library Management
              - Simple directory-based music browsing
              - Supports multiple audio formats via Symphonia
            - 🌈 Real-time Audio Visualization
              - Dynamic spectrum analyzer
              - Smooth animations
            - 🎚️ Audio Controls
              - Volume control
              - Track navigation
            - ⏯️ Playback Controls
              - Play/Pause/Stop functionality
              - Track progress display
            
            ## Installation
            
            1. Download the appropriate binary for your platform:
            - Windows: `melovitui-windows.exe`
            - macOS: `melovitui-macos`
            - Linux: `melovitui-linux`
            
            2. Configure your music directory either:
            - Pass it as an argument: `./melovitui --music-dir "/path/to/your/music"`
            - Or set it in config.toml: `music_dir = "/path/to/your/music"`
            
            ## Controls
            
            - `j`/`k`: Navigate music library
            - `Enter`: Play selected track
            - `p`: Play/Pause
            - `s`: Stop
            - `←`/`→`: Adjust volume
            - `q`: Quit
            
            ## Changes in this Release
            
            See the automatically generated release notes below for detailed changes.

  # Job to build for different platforms
  build:
    needs: create-release
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            name: linux
          - target: x86_64-apple-darwin
            os: macos-latest
            name: macos
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            name: windows
            extension: .exe

    runs-on: ${{ matrix.os }}
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install dependencies (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libasound2-dev pkg-config

      - name: Build binary
        run: cargo build --verbose --release --target ${{ matrix.target }}

      - name: Prepare binary (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          cd target/${{ matrix.target }}/release
          tar -czf ../../../${{ env.BINARY_NAME }}-${{ matrix.name }}.tar.gz ${{ env.BINARY_NAME }}
          echo "ASSET=target/${{ matrix.target }}/release/${{ env.BINARY_NAME }}" >> $GITHUB_ENV
          echo "ASSET_ARCHIVE=${{ env.BINARY_NAME }}-${{ matrix.name }}.tar.gz" >> $GITHUB_ENV

      - name: Prepare binary (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          cd target/${{ matrix.target }}/release
          7z a ../../../${{ env.BINARY_NAME }}-${{ matrix.name }}.zip ${{ env.BINARY_NAME }}${{ matrix.extension }}
          echo "ASSET=target/${{ matrix.target }}/release/${{ env.BINARY_NAME }}${{ matrix.extension }}" >> $env:GITHUB_ENV
          echo "ASSET_ARCHIVE=${{ env.BINARY_NAME }}-${{ matrix.name }}.zip" >> $env:GITHUB_ENV

      - name: Generate SHA-256
        shell: bash
        run: |
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            certutil -hashfile ${{ env.ASSET_ARCHIVE }} SHA256 | grep -v "hash" | grep -v "CertUtil" > ${{ env.ASSET_ARCHIVE }}.sha256
          else
            shasum -a 256 ${{ env.ASSET_ARCHIVE }} > ${{ env.ASSET_ARCHIVE }}.sha256
          fi

      # Upload release assets
      - name: Update Release Assets
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ${{ env.ASSET_ARCHIVE }}
            ${{ env.ASSET_ARCHIVE }}.sha256
